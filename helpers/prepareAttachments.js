import nodemailer from 'nodemailer';
import path from 'path';
import fs from 'fs';
import fetch from 'node-fetch';
import { updateDocumentInCollection } from './firebaseControl';

export const prepareAttachments = async pdfFiles => {
  try {
    return Promise.all(
      pdfFiles.map(async file => {
        if (file.url) {
          // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ URL
          try {
            const response = await fetch(file.url);
            if (!response.ok) {
              throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª –∑–∞ URL: ${file.url}`);
            }
            const buffer = await response.arrayBuffer();
            return {
              filename: file.name,
              content: Buffer.from(buffer),
              encoding: 'base64',
            };
          } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É ${file.url}:`, error);
            throw error;
          }
        } else if (file.path) {
          // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
          try {
            const buffer = fs.readFileSync(file.path);
            return {
              filename: file.name,
              content: buffer,
              encoding: 'base64',
            };
          } catch (error) {
            console.error(
              `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É ${file.path}:`,
              error
            );
            throw error;
          }
        } else {
          throw new Error('–§–∞–π–ª –Ω–µ –º–∞—î –≤–∞–ª—ñ–¥–Ω–æ–≥–æ URL –∞–±–æ —à–ª—è—Ö—É.');
        }
      })
    );
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∫–ª–∞–¥–µ–Ω—å:', error);
    throw error;
  }
};

export const parseAttachments = emailBody => {
  const attachments = [];
  const regex =
    /Content-Disposition: attachment;\s*filename="([^"]+)"\s*Content-Transfer-Encoding: base64\s*\n([\s\S]*?)\n--/g;
  let match;

  while ((match = regex.exec(emailBody)) !== null) {
    const filename = match[1].trim();
    const base64Content = match[2].replace(/\n/g, '').trim();

    attachments.push({
      filename,
      content: Buffer.from(base64Content, 'base64'),
      encoding: 'base64',
    });
  }

  return attachments;
};

import { Buffer } from 'buffer';

export const parseEmailBody = emailBody => {
  let cleanBody = emailBody;
  const attachments = [];

  // üîç –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –≤–∫–ª–∞–¥–µ–Ω—å —É Base64
  const attachmentRegex =
    /Content-Type:\s*([\w\/\-\.\+]+);\s*name="(.*?)"\s*Content-Disposition:\s*attachment;\s*filename="(.*?)"\s*Content-Transfer-Encoding:\s*base64\s*\n([\s\S]*?)\n--/g;
  let match;

  while ((match = attachmentRegex.exec(emailBody)) !== null) {
    const mimeType = match[1].trim(); // MIME-—Ç–∏–ø (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, application/pdf)
    let filename = match[2].trim(); // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É
    const base64Content = match[4].replace(/\n/g, '').trim(); // –í–º—ñ—Å—Ç —Ñ–∞–π–ª—É —É Base64

    // üìù –î–µ–∫–æ–¥—É—î–º–æ `=?utf-8?B?...?=` —É –Ω–æ—Ä–º–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
    if (filename.includes('=?utf-8?B?')) {
      try {
        filename = Buffer.from(
          filename.replace(/=\?utf-8\?B\?|=\?/g, ''),
          'base64'
        ).toString('utf-8');
      } catch (err) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É: ${filename}`, err);
      }
    }

    // ‚úÇÔ∏è –°–∫–æ—Ä–æ—á—É—î–º–æ –¥–æ–≤–≥—ñ –Ω–∞–∑–≤–∏
    if (filename.length > 30) {
      const ext = filename.split('.').pop(); // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
      filename = filename.substring(0, 25) + '...' + ext; // –û–±—Ä—ñ–∑–∞—î–º–æ –Ω–∞–∑–≤—É
    }

    attachments.push({
      filename,
      content: Buffer.from(base64Content, 'base64'),
      encoding: 'base64',
      mimeType,
    });

    // üî• –í–∏–¥–∞–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –∑ `body`, –∑–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
    cleanBody = cleanBody.replace(match[0], '');
  }

  // üßπ –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  cleanBody = cleanBody
    .replace(/--[\w\d:-]+\n/g, '')
    .replace(/Content-Type:.*\n/g, '')
    .replace(/Content-Disposition:.*\n/g, '')
    .replace(/Content-Transfer-Encoding:.*\n/g, '')
    .trim();

  return { cleanBody, attachments };
};

export const sendEmail = async ({
  to,
  subject,
  text,
  html,
  attachments,
  requestId,
}) => {
  try {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Nodemailer
    const transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com', // SMTP-—Å–µ—Ä–≤–µ—Ä Gmail
      port: 465, // –ü–æ—Ä—Ç SSL
      secure: true, // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è SSL
      auth: {
        user: process.env.SMTP_EMAIL,
        pass: process.env.SMTP_PASSWORD,
      },
    });

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–∏—Å—Ç–∞
    const mailOptions = {
      from: process.env.SMTP_EMAIL,
      to,
      subject,
      text,
      html,
      attachments,
    };

    const info = await transporter.sendMail(mailOptions);
    console.log(`–õ–∏—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${info.messageId}`);

    // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É Firestore
    if (requestId) {
      await updateDocumentInCollection(
        'userRequests',
        { status: 'sent' },
        requestId
      );
      console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç—É ${requestId} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'sent'`);
    }

    return info;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ª–∏—Å—Ç–∞:', error);
    throw error;
  }
};
