import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';

export async function updateOrderPDF(fileUrl, formData) {
  try {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π PDF –æ—Ä–¥–µ—Ä—É
    const response = await fetch(fileUrl);

    if (!response.ok) {
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF. –°—Ç–∞—Ç—É—Å: ${response.status}`);
    }

    const buffer = await response.arrayBuffer();

    if (!buffer || buffer.byteLength === 0 || isNaN(buffer.byteLength)) {
      throw new Error('–û—Ç—Ä–∏–º–∞–Ω–∏–π PDF –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π.');
    }

    console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª:', fileUrl);
    console.log('–ü–µ—Ä—à—ñ –±–∞–π—Ç–∏ —Ñ–∞–π–ª—É:', new Uint8Array(buffer).slice(0, 10));
    const pdfHeader = Buffer.from(buffer).toString('utf-8', 0, 5);
    if (!pdfHeader.startsWith('%PDF-')) {
      throw new Error('‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª –ù–ï —î –¥—ñ–π—Å–Ω–∏–º PDF!');
    }

    // const pdfDoc = await PDFDocument.load(buffer);
    const uint8Array = new Uint8Array(buffer);
    const pdfDoc = await PDFDocument.load(uint8Array);

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —Ñ–æ—Ä–º–∏ —É PDF
    const form = pdfDoc.getForm();
    // console.log(
    //   'Form fields:',
    //   form.getFields().map(f => f.getName())
    // );

    // –†–µ—î—Å—Ç—Ä—É—î–º–æ fontkit –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
    pdfDoc.registerFontkit(fontkit);

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
    // const fontPath = path.resolve('./public/fonts/Roboto-Regular.ttf');
    const fontPath = path.join(
      process.cwd(),
      'public/fonts/Roboto-Regular.ttf'
    );
    const fontBytes = fs.readFileSync(fontPath);
    const customFont = await pdfDoc.embedFont(fontBytes, { subset: false });

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É –ø–æ–ª–µ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É
    const setTextField = (fieldName, text) => {
      const field = form.getTextField(fieldName);
      if (!field) {
        console.warn(`–ü–æ–ª–µ '${fieldName}' –≤—ñ–¥—Å—É—Ç–Ω—î —É PDF.`);
        return;
      }
      field.updateAppearances(customFont);
      field.setText(text);
    };

    const PIB = () =>
      [formData?.surname, formData?.name, formData?.fatherName || '']
        .filter(i => i)
        .join(' ');
    const date = new Date(formData.dateCreating);
    const formattedMonth = String(date.getMonth() + 1).padStart(2, '0');
    const currentYear = String(date.getFullYear()).slice(-2);

    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–ª—è —Ñ–æ—Ä–º–∏
    setTextField('firstname1', `${PIB}`);
    setTextField('firstname2', `${formData.birthday} —Ä–æ–∫—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è`);
    setTextField('legal_assistance[number]', '–ë–ù');
    setTextField('legal_assistance[day]', String(date.getDate()));
    setTextField('legal_assistance[month]', formattedMonth);
    setTextField('legal_assistance[year]', String(date.getFullYear()));
    setTextField('organs[0]', formData.recipient.name);
    // setTextField('organs[1]', formData.recipient.name);
    setTextField('certificate[number]', '278');
    setTextField('certificate[day]', '18');
    setTextField('certificate[month]', '–ª–∏–ø–Ω—è');
    setTextField('certificate[year]', '2005');
    setTextField('ra[title]', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–æ—é –æ–±–ª–∞—Å–Ω–æ—é –ö–î–ö–ê');
    setTextField('current[day]', String(date.getDate()));
    setTextField('current[month]', formattedMonth);
    setTextField('current[year]', currentYear);

    form.flatten(); // –§—ñ–∫—Å—É—î–º–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø–æ–ª—è

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π PDF
    return await pdfDoc.save();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è PDF –æ—Ä–¥–µ—Ä—É:', error);
    throw error;
  }
}
